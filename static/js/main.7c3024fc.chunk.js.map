{"version":3,"sources":["components/appHeader/AppHeader.tsx","resources/img/mjolnir.png","services/MarvelService.ts","components/common/spinner/Spinner.tsx","components/common/error/error.gif","components/common/error/MessageError.tsx","components/randomChar/RandomChar.tsx","components/charList/CharList.tsx","components/skeleton/Skeleton.tsx","components/charInfo/CharInfo.tsx","resources/img/vision.png","components/common/errorBoundary/ErrorBoundary.tsx","components/app/App.tsx","index.tsx"],"names":["AppHeader","className","href","MarvelService","_baseUrl","_apiKey","_baseOffset","getResource","url","a","fetch","res","ok","Error","status","json","getAllCharacters","offset","data","results","map","_transformCharacter","getCharacter","id","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","Spinner","MessageError","style","display","width","height","objectFit","margin","src","img","alt","RandomChar","state","loading","error","marvelService","componentDidMount","updateCharacter","componentWillUnmount","onChatLoaded","setState","onCharLoading","onError","Math","floor","random","then","catch","this","spinner","messageError","content","props","onClick","mjolnir","Component","View","correctDesc","slice","objectFitStyle","CharList","charList","newItemLoading","charEnded","isActive","onRequest","onCharactersLoaded","newCharList","ended","length","focusOnItem","renderItems","item","imgStyle","onCharSelected","styleButton","disabled","Skeleton","CharInfo","charId","prevProps","skeleton","correctComics","i","ErrorBoundary","errorInfo","console","log","children","App","selectedChar","decoration","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c3024fc.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n  return (\n    <header className=\"app__header\">\n      <h1 className=\"app__title\">\n        <a href=\"#\">\n          <span>Marvel</span> information portal\n        </a>\n      </h1>\n      <nav className=\"app__menu\">\n        <ul>\n          <li>\n            <a href=\"#\">Characters</a>\n          </li>\n          /\n          <li>\n            <a href=\"#\">Comics</a>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default AppHeader;\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","export class MarvelService {\n  _baseUrl = 'https://gateway.marvel.com:443/v1/public/';\n  _apiKey = 'apikey=1d84e832d56bee2cc469d294f4e1f0be';\n  _baseOffset = 210;\n  getResource = async (url: string) => {\n    const res = await fetch(url);\n\n    if (!res.ok) {\n      return new Error(`Could not fetch ${url}, status: ${res.status}`);\n    }\n\n    return await res.json();\n  };\n\n  getAllCharacters = async (offset = this._baseOffset) => {\n    const res = await this.getResource(\n      `${this._baseUrl}characters?limit=9&offset=${offset}&${this._apiKey}`\n    );\n    return res.data.results.map(this._transformCharacter);\n  };\n  getCharacter = async (id: number) => {\n    const res = await this.getResource(\n      `${this._baseUrl}characters/${id}?${this._apiKey}`\n    );\n    return this._transformCharacter(res.data.results[0]);\n  };\n  _transformCharacter = (char: CharacterApiType): CharacterType => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description,\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n}\n\nexport type CharacterType = {\n  id: number | undefined;\n  name: string | undefined;\n  description: string | undefined;\n  thumbnail: string | undefined;\n  homepage: string | undefined;\n  wiki: string | undefined;\n  comics: [\n    {\n      resourceURI: string | undefined;\n      name: string | undefined;\n    }\n  ];\n};\n\ntype CharacterApiType = {\n  id: undefined | number;\n  name: undefined | string;\n  description: undefined | string;\n  thumbnail: {\n    path: undefined | string;\n    extension: undefined | string;\n  };\n  urls: [\n    {\n      url: undefined | string;\n    },\n    {\n      url: undefined | string;\n    }\n  ];\n  comics: {\n    items: [\n      {\n        resourceURI: string | undefined;\n        name: string | undefined;\n      }\n    ];\n  };\n};\n","import './spinner.scss';\n\nexport const Spinner = () => {\n  return (\n    <div className=\"spinner\">\n      <div className=\"blob top\"></div>\n      <div className=\"blob bottom\"></div>\n      <div className=\"blob left\"></div>\n      <div className=\"blob move-blob\"></div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nexport const MessageError = () => {\n  return (\n    <img\n      style={{\n        display: 'block',\n        width: '250px',\n        height: '250px',\n        objectFit: 'contain',\n        margin: '0 auto',\n      }}\n      src={img}\n      alt=\"Error\"\n    />\n  );\n};\n","import './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport { Component } from 'react';\nimport { CharacterType, MarvelService } from '../../services/MarvelService';\nimport { Spinner } from '../common/spinner/Spinner';\nimport { MessageError } from '../common/error/MessageError';\n\nclass RandomChar extends Component {\n  state = {\n    char: {} as CharacterType,\n    loading: true,\n    error: false,\n  };\n  marvelService = new MarvelService();\n\n  componentDidMount = () => {\n    this.updateCharacter();\n  };\n\n  componentWillUnmount = () => {};\n\n  onChatLoaded = (char: CharacterType) => {\n    this.setState({ char, loading: false });\n  };\n\n  onCharLoading = () => {\n    this.setState({ loading: true });\n  };\n\n  onError = () => {\n    this.setState({ loading: false, error: true });\n  };\n\n  updateCharacter = () => {\n    const id = Math.floor(Math.random() * (1011400 - 1011005) + 1011005);\n    this.onCharLoading();\n    this.marvelService\n      .getCharacter(id)\n      .then(this.onChatLoaded)\n      .catch(this.onError);\n  };\n\n  render() {\n    const { char, loading, error } = this.state;\n    const spinner = loading ? <Spinner /> : null;\n    const messageError = error ? <MessageError /> : null;\n    const content = !(loading || error) ? <View props={char} /> : null;\n\n    return (\n      <div className=\"randomchar\">\n        {messageError}\n        {spinner}\n        {content}\n        <div className=\"randomchar__static\">\n          <p className=\"randomchar__title\">\n            Random character for today!\n            <br />\n            Do you want to get to know him better?\n          </p>\n          <p className=\"randomchar__title\">Or choose another one</p>\n          <button\n            className=\"button button__main\"\n            onClick={this.updateCharacter}\n          >\n            <div className=\"inner\">try it</div>\n          </button>\n          <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n        </div>\n      </div>\n    );\n  }\n}\n\ntype ViewPropsType = {\n  props: CharacterType;\n};\n\nconst View = (props: ViewPropsType) => {\n  const { name, description, thumbnail, homepage, wiki } = props.props;\n  const correctDesc = description\n    ? description.slice(0, 220) + '...'\n    : 'Information for this character is not available.';\n\n  const objectFitStyle =\n    thumbnail ===\n    'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n      ? 'randomchar__img randomchar__contain'\n      : 'randomchar__img';\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className={objectFitStyle} />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{correctDesc}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import './charList.scss';\nimport { Component } from 'react';\nimport { CharacterType, MarvelService } from '../../services/MarvelService';\nimport { MessageError } from '../common/error/MessageError';\nimport { Spinner } from '../common/spinner/Spinner';\nimport { runInThisContext } from 'vm';\n\ninterface ChartListPropsType {\n  onCharSelected: (id: number | null | undefined) => void;\n}\n\nclass CharList extends Component<ChartListPropsType> {\n  state = {\n    charList: [] as CharacterType[],\n    loading: true,\n    error: false,\n    newItemLoading: false,\n    offset: 210,\n    charEnded: false,\n    isActive: null,\n  };\n\n  marvelService = new MarvelService();\n\n  componentDidMount = () => {\n    this.onRequest();\n  };\n\n  onRequest = (offset?: number) => {\n    this.onCharLoading();\n    this.marvelService\n      .getAllCharacters(offset)\n      .then(this.onCharactersLoaded)\n      .catch(this.onError);\n  };\n\n  onCharLoading = () => {\n    this.setState({\n      newItemLoading: true,\n    });\n  };\n\n  onCharactersLoaded = (newCharList: CharacterType[]) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n    this.setState(() => ({\n      charList: [...this.state.charList, ...newCharList],\n      loading: false,\n      newItemLoading: false,\n      offset: this.state.offset + 9,\n      charEnded: ended,\n    }));\n  };\n\n  onError = () => {\n    this.setState({ loading: false, error: true });\n  };\n\n  //change className in isActive clicking\n  focusOnItem = (id: number | undefined) => {\n    this.setState({\n      isActive: id,\n    });\n  };\n\n  // This method created for optimization,\n  // to avoid placing such a structure in the method render\n  renderItems = (charList: CharacterType[]) => {\n    const items = charList.map((item) => {\n      const imgStyle =\n        item.thumbnail ===\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n          ? 'char__img char__img_unset'\n          : 'char__img';\n\n      return (\n        <li\n          className={\n            this.state.isActive === item.id\n              ? 'char__item char__item_selected'\n              : 'char__item'\n          }\n          key={item.id}\n          onClick={() => this.focusOnItem(item.id)}\n        >\n          <img\n            className={imgStyle}\n            src={item.thumbnail}\n            alt={item.name}\n            onClick={() => this.props.onCharSelected(item.id)}\n          />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n\n    return <ul className=\"char__grid\">{items}</ul>;\n  };\n\n  render() {\n    const { charList, loading, error, newItemLoading, offset, charEnded } =\n      this.state;\n    const items = this.renderItems(charList);\n    const messageError = error ? <MessageError /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(error || loading) && items;\n    const styleButton = charEnded\n      ? 'button_none'\n      : 'button button__main button__long';\n\n    return (\n      <div className=\"char__list\">\n        {messageError}\n        {spinner}\n        {content}\n        <button\n          className={styleButton}\n          disabled={newItemLoading}\n          onClick={() => this.onRequest(offset)}\n        >\n          <div className=\"inner\">load more</div>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import './charInfo.scss';\nimport { Component } from 'react';\nimport { CharacterType, MarvelService } from '../../services/MarvelService';\nimport { MessageError } from '../common/error/MessageError';\nimport { Spinner } from '../common/spinner/Spinner';\nimport Skeleton from '../skeleton/Skeleton';\n\ninterface CharInfoPropsType {\n  charId: number | null;\n}\n\ninterface CharInfoStateType {\n  char: null | CharacterType;\n  loading: boolean;\n  error: boolean;\n}\n\nclass CharInfo extends Component<CharInfoPropsType, CharInfoStateType> {\n  state = {\n    char: null,\n    loading: false,\n    error: false,\n  };\n\n  marvelService = new MarvelService();\n\n  componentDidMount() {\n    this.updateCharacter();\n  }\n\n  componentDidUpdate(prevProps: CharInfoPropsType) {\n    if (prevProps.charId !== this.props.charId) {\n      this.updateCharacter();\n    }\n  }\n\n  updateCharacter = () => {\n    const { charId } = this.props;\n    if (!charId) {\n      return;\n    }\n    this.onCharLoading();\n    this.marvelService\n      .getCharacter(charId)\n      .then(this.onChatLoaded)\n      .catch(this.onError);\n  };\n\n  onChatLoaded = (char: CharacterType) => {\n    this.setState({ char, loading: false });\n  };\n\n  onCharLoading = () => {\n    this.setState({ loading: true });\n  };\n\n  onError = () => {\n    this.setState({ loading: false, error: true });\n  };\n\n  render() {\n    const { char, loading, error } = this.state;\n\n    const messageError = error ? <MessageError /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const skeleton = char || error || loading ? null : <Skeleton />;\n    const content = !(error || loading || !char) && <View char={char} />;\n\n    return (\n      <div className=\"char__info\">\n        {messageError}\n        {spinner}\n        {skeleton}\n        {content}\n      </div>\n    );\n  }\n}\n\ntype ViewPropsType = {\n  char: CharacterType;\n};\n\nconst View = ({ char }: ViewPropsType) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  const correctDesc = description\n    ? description\n    : 'Information for this character is not available.';\n  const imgStyle =\n    thumbnail ===\n    'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n      ? 'char__image char__image_unset'\n      : 'char__image';\n  const correctComics = comics.length\n    ? comics.slice(0, 9).map((item, i) => {\n        return (\n          <li key={i} className=\"char__comics-item\">\n            {item.name}\n          </li>\n        );\n      })\n    : 'There is no comics with this character.';\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img className={imgStyle} src={thumbnail} alt={name} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{correctDesc}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">{correctComics}</ul>\n    </>\n  );\n};\n\nexport default CharInfo;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Component } from 'react';\nimport { MessageError } from '../error/MessageError';\n\nexport class ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  componentDidCatch(error: Error, errorInfo: any) {\n    console.log(error, errorInfo);\n\n    this.setState({ error: true });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <MessageError />;\n    }\n\n    return this.props.children;\n  }\n}\n","import AppHeader from '../appHeader/AppHeader';\nimport RandomChar from '../randomChar/RandomChar';\nimport CharList from '../charList/CharList';\nimport CharInfo from '../charInfo/CharInfo';\n\nimport decoration from '../../resources/img/vision.png';\nimport { Component } from 'react';\nimport { ErrorBoundary } from '../common/errorBoundary/ErrorBoundary';\n\nclass App extends Component {\n  state = {\n    selectedChar: null,\n  };\n\n  onCharSelected = (id: number | null | undefined) => {\n    this.setState({\n      selectedChar: id,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <AppHeader />\n        <main>\n          <ErrorBoundary>\n            <RandomChar />\n          </ErrorBoundary>\n          <div className=\"char__content\">\n            <ErrorBoundary>\n              <CharList onCharSelected={this.onCharSelected} />\n            </ErrorBoundary>\n            <ErrorBoundary>\n              <CharInfo charId={this.state.selectedChar} />\n            </ErrorBoundary>\n          </div>\n          <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nimport './style/style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}